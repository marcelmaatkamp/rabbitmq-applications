buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://maven.eveoh.nl/content/repositories/releases"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath "org.codehaus.groovy:groovy-all:2.3.6"
    }
}

allprojects {

    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "spring-boot"
    apply plugin: "docker"
// apply plugin: "scala"

    jar {
        baseName = "rabbitmq-applications"
        version = "0.1"
    }

    repositories {
        mavenCentral()
    }

    project.ext {
        aspectjVersion = "1.8.7"
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        jacksonVersion = "1.9.13"
        jackson2Version = "2.3.2"
        bouncycastleVersion = "1.53"
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter-amqp"
        compile "org.springframework.integration:spring-integration-ip:4.2.0.RELEASE"
        compile "org.springframework.integration:spring-integration-amqp:4.2.0.RELEASE"
        compile "org.springframework.amqp:spring-rabbit:1.5.0.RELEASE"
        compile "org.springframework.amqp:spring-amqp:1.5.0.RELEASE"

        compile "org.projectreactor:reactor-net:1.1.6.RELEASE"
        compile "org.projectreactor.spring:reactor-spring-context:1.1.3.RELEASE"
        compile "com.jayway.jsonpath:json-path:2.0.0"

        compile "org.apache.commons:commons-lang3:3.4"
        compile "commons-io:commons-io:2.4"

        // compile "org.scala-lang:scala-library:2.11.7"
        // compile "org.scala-lang:scala-compiler:2.11.7"

        compile "com.thoughtworks.xstream:xstream:1.4.8"
        compile "org.codehaus.jettison:jettison:1.3.7"

        compile "org.codehaus.jackson:jackson-core-asl:$jacksonVersion"
        compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-core:$jackson2Version"
        compile "com.fasterxml.jackson.core:jackson-databind:$jackson2Version"

        testCompile "junit:junit"
        testCompile "org.springframework.boot:spring-boot-starter-test"

    }

    task wrapper(type: Wrapper) {
        gradleVersion = "2.8"
    }

    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
}

springBoot {
    mainClass = "org.datadiode.black.DatadiodeBlackStarter"
}

task runApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = "encryption.Encryption"
}

project(":application") {

}
// datadiode
project(":application:datadiode") {
    dependencies {
        compile project(':application')
        compile project(':library:encryption')

    }
}
project(":application:datadiode:black") {
    dependencies {
        compile project(':application:datadiode')
    }
    springBoot {
        mainClass = "org.datadiode.black.DatadiodeBlackStarter"
    }
}
project(":application:datadiode:red") {
    dependencies {
        compile project(':application:datadiode')
    }
    springBoot {
        mainClass = "org.datadiode.red.DatadiodeRedStarter"
    }
}

// encryption
project(":application:encryption") {
    dependencies {
        compile project(':application')
        compile project(':library:encryption')


    }
}
project(":application:encryption:encrypt") {
    dependencies {
        compile project(':application:encryption')
    }
    springBoot {
        mainClass = "org.encryption.encrypt.EncryptionEncryptStarter"
    }
}
project(":application:encryption:decrypt") {
    dependencies {
        compile project(':application:encryption')
    }
    springBoot {
        mainClass = "org.encryption.decrypt.EncryptionDecryptStarter"
    }
}

// library
project(":library") {

}
project(":library:encryption") {
    dependencies {
        compile project(':library')
        compile "org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion"
        compile "org.bouncycastle:bcpg-jdk15on:$bouncycastleVersion"
    }
}

project(":library:encryption:encrypt") {
    dependencies {
        compile project(':library:encryption')
    }


}
project(":library:encryption:decrypt") {
    dependencies {
        compile project(':library:encryption')
    }

}
